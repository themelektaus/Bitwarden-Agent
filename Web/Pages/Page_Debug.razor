<h1>Debug</h1>

@if (app.NextUpdateCheckCountdown == 0)
{
    <p>Checking for Updates ...</p>
}
else
{
    <p>Next Update Check in @app.NextUpdateCheckCountdown seconds</p>

    @if (app.NextUpdateCheckCountdown > 5)
    {
        <div flex-center>
            <Button onClick="() => app.NextUpdateCheckCountdown = 5">
                Check Now
            </Button>
        </div>
    }
}

<div flex-center>
    <Button onClick="@(() => app.components.root.downloadDialog.Open(new("File", "Name", "NeededFor")))">
        Open Download Dialog
    </Button>
</div>

<div flex-center>
    <Button onClickAsync="@(async () => await app.TempStatus("This is a temporary status message. It is visible for 3 seconds."))">
        Status Message
    </Button>
</div>

<div flex-center>
    <Button onClickAsync="@OnClickOpenFileDialogAsync">
        Open File Dialog
    </Button>
</div>

<div flex-center>
    <input @bind="dialogFileName">
</div>

@implements IDisposable

@code {

    static App app => App.Instance;

    string dialogFileName = string.Empty;

    protected override void OnInitialized()
    {
        app.pages.debug = this;
        app.components.menu.RenderLater();
    }

    public void Dispose()
    {
        app.pages.debug = null;
    }

    async Task OnClickOpenFileDialogAsync()
    {
        var fileName = await app.ShowOpenFileDialog(dialogFileName);
        if (fileName is null)
            return;

        dialogFileName = fileName;

        this.RenderLater();
    }

}
