<div class="topbar">
    <input @ref="searchInputReference"
            @oninput="OnSearch"
            type="text"
            class="interactable"
            placeholder="Search" />
</div>
<ul @ref="itemsReference">
    @for (var i = 0; i < items.Count; i++)
    {
        var index = i;
        var item = items[index];

        <li class="interactable @(selectedIndex == index ? "selected" : "")"
            @onmousedown="() => selectedIndex = index">
            <div>
                @foreach (var collectionName in @item.GetCollectionNames())
                {
                    <div class="badge">@collectionName</div>
                }
                <div>@item.GetSimplifiedName()</div>
            </div>
            <div>
                <div>
                    <div>Username</div>
                    <div class="selectable-text">@item.login.username</div>
                </div>
                <div>
                    <div>Password</div>
                    <div class="mono">@item.login.password</div>
                </div>
                @if (item.GetUrl() != string.Empty)
                {
                    <div>
                        <div>URL</div>
                        <div class="link" @onclick="() => OpenLink(item.GetUrl())">
                            @item.GetUrl()
                        </div>
                    </div>
                }
                @if (item.GetNotes() != string.Empty)
                {
                    <div>
                        <div>Notes</div>
                        <div class="selectable-text">
                            @item.GetNotes().ToHtmlString()
                        </div>
                    </div>
                }
            </div>
            @if (Config.Instance.developerMode)
            {
                <pre>@item.ToJson()</pre>
            }
        </li>
    }
</ul>

@implements IDisposable

@inject IJSRuntime javascript

@code {

    static App app => App.Instance;
    static Root root => app.components.root;
    static Menu menu => app.components.menu;

    ElementReference searchInputReference;
    string searchText;

    ElementReference itemsReference;

    readonly List<Bitwarden_Item> items = new();

    int _selectedIndex;
    int selectedIndex
    {
        get => ClampIndex(_selectedIndex);
        set
        {
            var newIndex = ClampIndex(value);
            if (_selectedIndex == newIndex)
                return;

            _selectedIndex = newIndex;
            menu.RenderLater();
        }
    }

    public Bitwarden_Item SelectedItem
        => selectedIndex == -1
            ? null
            : items[selectedIndex];

    protected override void OnInitialized()
    {
        app.pages.database = this;
        UpdateItems();
    }

    public void Dispose()
    {
        app.pages.database = null;
        menu.RenderLater();
    }

    protected override async Task OnAfterRenderAsync(bool _)
    {
        menu.RenderLater();

        if (selectedIndex == -1)
            return;

        await javascript.InvokeVoidAsync(
            "scrollChildIntoView",
            itemsReference,
            selectedIndex
        );
    }

    void OnSearch(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString();

        UpdateItems();
    }

    public void UpdateItems()
    {
        var items = new List<Bitwarden_Item>(app.data?.items ?? []);

        var searchTexts = (this.searchText ?? string.Empty)
            .Split(' ', StringSplitOptions.RemoveEmptyEntries);

        if (searchTexts.Length > 0)
        {
            var ignoreCase = StringComparison.OrdinalIgnoreCase;

            foreach (var searchText in searchTexts)
            {
                items.RemoveAll(x =>
                    !x.name.Contains(searchText, ignoreCase) &&
                    !x.login.username.Contains(searchText, ignoreCase) &&
                    !x.GetCollectionNames().Any(x => x.Contains(searchText, ignoreCase))
                );
            }
        }

        this.items.Clear();
        this.items.AddRange(items);

        app.components.menu.RenderLater();
    }

    int ClampIndex(int index)
    {
        return (items.Count > 0)
            ? Math.Clamp(index, 0, items.Count - 1)
            : -1;
    }

    [JSInvokable]
    public static async Task OnKeyDown(string key, bool shiftKey)
    {
        var @this = app.pages.database;
        if (@this is not null)
            await @this.OnKeyDownInternal(key, shiftKey);
    }

    async Task OnKeyDownInternal(string key, bool shiftKey)
    {
        if (app.IsBusy())
            return;

        if (Dialog.active is not null)
            return;

        switch (key)
        {
            case "ArrowUp": selectedIndex--; this.RenderLater(); break;
            case "ArrowDown": selectedIndex++; this.RenderLater(); break;
            case "Home": selectedIndex = 0; this.RenderLater(); break;
            case "End": selectedIndex = items.Count - 1; this.RenderLater(); break;
            case "PageUp": selectedIndex -= 10; this.RenderLater(); break;
            case "PageDown": selectedIndex += 10; this.RenderLater(); break;
            case "Enter":
                await javascript.InvokeVoidAsync("blur");
                if (shiftKey)
                    await root.PerformAutoTypeUsernameAndPassword();
                else
                    await root.PerformAutoTypePassword();
                return;
        }

        await javascript.InvokeVoidAsync(
            "switchToInput",
            searchInputReference,
            key
        );
    }

    void OpenLink(string url)
    {
        System.Diagnostics.Process.Start(
            new System.Diagnostics.ProcessStartInfo(url.Replace("&", "^&"))
                { UseShellExecute = true }
        );
    }
}
