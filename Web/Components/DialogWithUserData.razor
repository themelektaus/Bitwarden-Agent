@typeparam T

<div class="dialog @(visible && Dialog.active == this ? "visible" : "")" @onclick="SimpleCallback.Create(OnClick)">
    <div class="dialog-box" @onclick:stopPropagation="true">
        <div class="dialog-box-title">@Title(userData)</div>
        <div class="dialog-box-content">@Body(userData)</div>
        <div class="dialog-box-bottom">@Bottom(userData)</div>
    </div>
</div>

@implements IDialog

@code {

    [Parameter] public RenderFragment<T> Title { get; set; }
    [Parameter] public RenderFragment<T> Body { get; set; }
    [Parameter] public RenderFragment<T> Bottom { get; set; }

    [Parameter] public Func<Task> onShow { get; set; }

    bool invokeOnShowLater;

    bool visible;

    T userData;

    public void Open(T userData)
    {
        this.userData = userData;
        Open();
    }

    public void Open()
    {
        Dialog.all.Push(this);
        Show();
    }

    void OnClick()
    {
        if (!App.Instance.IsBusy())
            Close();
    }

    public void Close()
    {
        Dialog.all.Pop();
        Hide();

        var dialog = Dialog.active;
        if (dialog is not null)
            dialog.Show();
    }

    public void Show()
    {
        visible = true;
        invokeOnShowLater = true;
        this.RenderLater();
    }

    void Hide()
    {
        visible = false;
        this.RenderLater();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (invokeOnShowLater)
        {
            invokeOnShowLater = false;

            if (onShow is not null)
                await onShow.Invoke();
        }
    }

}
